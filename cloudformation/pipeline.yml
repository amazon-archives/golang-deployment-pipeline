Description: >

    This CloudFormation template will deploy a full CI/CD pipeline for Go
    development. It includes building with AWS CodeBuild, and infrastructure
    deployment via AWS CloudFormation. It will create an AWS CodePipeline for
    orchastrating builds, testing and deployments to beta and production 
    environments. 

Parameters:
    
    ApplicationName: 
        Description: This will be used to name the pipeline and build resources
        Type: String
        AllowedPattern: '[A-Za-z0-9-]+'
    
    Branch:
        Description: 'Git branch to pull.'
        Type: String
        Default: ''

    ApiSecret:
        Description: 'Reqired. WebHook secrets for use with GitHub Enterprise and GitLab. Cannot contain: , \ ""'
        Type: String
        NoEcho: 'true'

    GitUrl:
        Description: 'URL for git pull'
        Type: String

    GitPullLambdaSubnet:
        Description: The subnet that the git pull Lambda function will be deployed in. This should be a private subnet with a NAT gateway and your source control should be accessible from this subnet.
        Type: 'AWS::EC2::Subnet::Id'

    GitPullLambdaVpc:
        Description: The VPC you want to deploy the Git Pull lambda function into.
        Type: 'AWS::EC2::VPC::Id'
        Default: ''

Metadata:

    AWS::CloudFormation::Interface:
        ParameterGroups:
            - 
                Label: 
                    default: Application Configuration
                Parameters:
                    - ApplicationName
            - 
                Label:
                    default: Git Configuration
                Parameters:
                    - GitUrl
                    - Branch
                    - ApiSecret

Mappings:
    LambdaBuckets:
        us-east-1:
            Name: custom-source-action-blog-us-east-1
        us-west-2:
            Name: custom-source-action-blog-us-west-2
        eu-west-1:
            Name: custom-source-action-blog-eu-west-1

    Constants:
        CustomSourceAction:
            SourceActionProvider: CustomWebhookSourceAction
            SourceActionVersion: 100

Resources:


    ArtifactS3Bucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            Tags: []

    CustomSourceAction:
        Type: AWS::CodePipeline::CustomActionType
        Properties:
            Category: Source
            Settings:
                EntityUrlTemplate: !Ref GitUrl
            ConfigurationProperties:
                - 
                    Name: Branch
                    Required: true
                    Key: false
                    Secret: false
                    Queryable: false 
                    Description: 'Git branch to pull.'
                    Type: String
                - 
                    Name: GitUrl
                    Required: true
                    Key: false
                    Secret: false
                    Queryable: false 
                    Description: 'SSH git clone URL.'
                    Type: String
                - 
                    Name: KeyBucket
                    Required: true
                    Key: false
                    Secret: false
                    Queryable: false 
                    Description: 'Name of the bucket to store keys in.'
                    Type: String
            InputArtifactDetails:
                MaximumCount: 0
                MinimumCount: 0
            OutputArtifactDetails:
                MaximumCount: 1
                MinimumCount: 1
            Provider: !FindInMap 
                        - Constants
                        - CustomSourceAction
                        - SourceActionProvider
            Version: !FindInMap 
                        - Constants
                        - CustomSourceAction
                        - SourceActionVersion

    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref ApplicationName
            RoleArn: !Sub ${CodePipelineRole.Arn}
            ArtifactStore: 
                Type: S3
                Location: !Ref ArtifactS3Bucket
            Stages:
                - 
                    Name: Source
                    Actions:
                        -
                            Name: Git Pull
                            ActionTypId:
                                Category: Source
                                Owner: Custom
                                Version: !FindInMap 
                                            - Constants
                                            - CustomSourceAction
                                            - SourceActionVersion
                                Provider: !FindInMap 
                                            - Constants
                                            - CustomSourceAction
                                            - SourceActionProvider
                            OutputArtifacts:
                                -  Name: Source
                            Configuration:
                                Branch: !Ref Branch
                                GitUrl: !Ref GitUrl
                                KeyBucket: !Ref KeyBucket
                -
                    Name: Build
                    Actions:
                        -
                            Name: CodeBuild
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId: 
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Built
                            Configuration: 
                                ProjectName: !Ref CodeBuild
                -
                    Name: Staging
                    Actions:
                        - 
                            Name: DeployInfrastructure
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CloudFormation
                            Configuration:
                                ActionMode: REPLACE_ON_FAILURE
                                RoleArn: !Sub ${CodePipelineCloudFormationRole.Arn}
                                Capabilities: CAPABILITY_NAMED_IAM
                                StackName: !Sub ${ApplicationName}-staging
                                TemplatePath: Built::cloudformation/infrastructure.yml
                                TemplateConfiguration: Built::config/staging.conf
                                ParameterOverrides: !Sub |
                                    {
                                        "ApplicationName": "${ApplicationName}",
                                        "EnvironmentName": "staging",
                                        "ArtifactS3Bucket": "${ArtifactS3Bucket}"
                                    }
                        - 
                            Name: DeployApplication
                            RunOrder: 2
                            InputArtifacts: 
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CodeDeploy
                            Configuration: 
                                ApplicationName: !Ref ApplicationName
                                DeploymentGroupName: staging
                -
                    Name: Approvals
                    Actions:
                        - 
                            Name: ProductionGate
                            ActionTypeId: 
                                Category: Approval
                                Owner: AWS
                                Version: 1
                                Provider: Manual
                -
                    Name: Production
                    Actions:
                        - 
                            Name: DeployInfrastructure
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CloudFormation
                            Configuration:
                                ActionMode: CREATE_UPDATE
                                RoleArn: !Sub ${CodePipelineCloudFormationRole.Arn}
                                Capabilities: CAPABILITY_NAMED_IAM
                                StackName: !Sub ${ApplicationName}-production
                                TemplatePath: Built::cloudformation/infrastructure.yml
                                TemplateConfiguration: Built::config/production.conf
                                ParameterOverrides: !Sub |
                                    {
                                        "ApplicationName": "${ApplicationName}",
                                        "EnvironmentName": "production",
                                        "ArtifactS3Bucket": "${ArtifactS3Bucket}"
                                    }
                        - 
                            Name: DeployApplication
                            RunOrder: 2
                            InputArtifacts: 
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CodeDeploy
                            Configuration: 
                                ApplicationName: !Ref ApplicationName
                                DeploymentGroupName: production
                        
    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref ApplicationName
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/golang:1.10
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    - 
                        Name: ARTIFACT_S3_BUCKET
                        Value: !Sub ${ArtifactS3Bucket}
            Artifacts:
                Name: !Ref ApplicationName
                Type: CODEPIPELINE

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codepipeline.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [
                                {
                                    "Action": [ "s3:GetBucketVersioning" ],
                                    "Resource": [ "arn:aws:s3:::${ArtifactS3Bucket}" ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "S3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/${ApplicationName}/*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codedeploy:CreateDeployment",
                                        "codedeploy:GetApplicationRevision",
                                        "codedeploy:GetDeployment",
                                        "codedeploy:GetDeploymentConfig",
                                        "codedeploy:RegisterApplicationRevision"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:UpdateStack",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DeleteChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate",
                                        "iam:PassRole"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }

    CodePipelineCloudFormationRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": { 
                                "Service": "cloudformation.amazonaws.com" 
                            }
                        }]
                    }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [{
                                    "Effect": "Allow",
                                    "Action": [ "*" ],
                                    "Resource": "*"
                            }]
                        }

    CodeDeployApplication:
        Type: AWS::CodeDeploy::Application
        Properties:
            ApplicationName: !Sub ${ApplicationName}

    CodeDeployServiceRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codedeploy.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceStatus",
                                "tag:GetTags",
                                "tag:GetResources",
                                "sns:Publish",
                                "cloudwatch:DescribeAlarms"
                            ],
                            "Resource": "*"
                            }
                        ]
                    }

    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": { 
                                "Service": "codebuild.amazonaws.com" 
                            }
                        }]
                    }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
                    PolicyDocument: !Sub |      
                        {
                            "Statement": [              
                                {
                                    "Effect": "Allow",
                                    "Resource": [ "*" ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/${ApplicationName}/*"
                                    ],
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:PutObject"
                                    ]
                                }
                            ]
                        }

    KeyBucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            Tags: []

    OutputBucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            VersioningConfiguration:
                Status: Enabled
            Tags: []

    KMSKey:
        Type: 'AWS::KMS::Key'
        Properties:
            Description: 'git CodePipeline integration, bucket to store ssh keys'
            KeyPolicy:
                Version: 2012-10-17
                Statement:
                    - 
                        Sid: Allow access for Key Administrators
                        Effect: Allow
                        Principal:
                            AWS:
                                - !Join 
                                    - ''
                                    - 
                                        - 'arn:aws:iam::'
                                        - !Ref 'AWS::AccountId'
                                        - ':root'
                        Action:
                            - 'kms:Create*'
                            - 'kms:Describe*'
                            - 'kms:Enable*'
                            - 'kms:List*'
                            - 'kms:Put*'
                            - 'kms:Update*'
                            - 'kms:Revoke*'
                            - 'kms:Disable*'
                            - 'kms:Get*'
                            - 'kms:Delete*'
                            - 'kms:ScheduleKeyDeletion'
                            - 'kms:CancelKeyDeletion'
                        Resource: '*'
                    - 
                        Sid: Allow use of the key
                        Effect: Allow
                        Principal:
                            AWS:
                                - !Join 
                                    - ''
                                    - 
                                        - 'arn:aws:iam::'
                                        - !Ref 'AWS::AccountId'
                                        - ':root'
                        Action:
                            - 'kms:Encrypt'
                            - 'kms:Decrypt'
                            - 'kms:ReEncrypt*'
                            - 'kms:GenerateDataKey*'
                            - 'kms:DescribeKey'
                        Resource: '*'
                    - 
                        Sid: Allow attachment of persistent resources
                        Effect: Allow
                        Principal:
                            AWS:
                                - !Join 
                                    - ''
                                    - 
                                        - 'arn:aws:iam::'
                                        - !Ref 'AWS::AccountId'
                                        - ':root'
                        Action:
                            - 'kms:CreateGrant'
                            - 'kms:ListGrants'
                            - 'kms:RevokeGrant'
                        Resource: '*'
                        Condition:
                            Bool:
                                'kms:GrantIsForAWSResource': true

    KMSKey:
        Type: 'AWS::KMS::Key'
        Properties:
            Description: 'git CodePipeline integration, bucket to store ssh keys'
            KeyPolicy:
                Version: 2012-10-17
                Statement:
                    - 
                        Sid: Allow access for Key Administrators
                        Effect: Allow
                        Principal:
                            AWS:
                                - !Join 
                                    - ''
                                    - 
                                        - 'arn:aws:iam::'
                                        - !Ref 'AWS::AccountId'
                                        - ':root'
                        Action:
                            - 'kms:Create*'
                            - 'kms:Describe*'
                            - 'kms:Enable*'
                            - 'kms:List*'
                            - 'kms:Put*'
                            - 'kms:Update*'
                            - 'kms:Revoke*'
                            - 'kms:Disable*'
                            - 'kms:Get*'
                            - 'kms:Delete*'
                            - 'kms:ScheduleKeyDeletion'
                            - 'kms:CancelKeyDeletion'
                        Resource: '*'
                    - 
                        Sid: Allow use of the key
                        Effect: Allow
                        Principal:
                            AWS:
                                - !Join 
                                    - ''
                                    - 
                                        - 'arn:aws:iam::'
                                        - !Ref 'AWS::AccountId'
                                        - ':root'
                        Action:
                            - 'kms:Encrypt'
                            - 'kms:Decrypt'
                            - 'kms:ReEncrypt*'
                            - 'kms:GenerateDataKey*'
                            - 'kms:DescribeKey'
                        Resource: '*'
                    - 
                        Sid: Allow attachment of persistent resources
                        Effect: Allow
                        Principal:
                            AWS:
                                - !Join 
                                    - ''
                                    - 
                                        - 'arn:aws:iam::'
                                        - !Ref 'AWS::AccountId'
                                        - ':root'
                        Action:
                            - 'kms:CreateGrant'
                            - 'kms:ListGrants'
                            - 'kms:RevokeGrant'
                        Resource: '*'
                        Condition:
                            Bool:
                                'kms:GrantIsForAWSResource': true

    CreateSSHKeyRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - 
                        Effect: Allow
                        Principal:
                            Service: lambda.amazonaws.com
                        Action: 'sts:AssumeRole'
            Path: /
            Policies:
                - 
                    PolicyName: git2cp-sshkeygen
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - 's3:GetObject'
                                Resource:
                                    - !Join 
                                        - ''
                                        - 
                                            - 'arn:aws:s3:::'
                                            - !Ref KeyBucket
                                            - /crypto.zip
                            - 
                                Effect: Allow
                                Action:
                                    - 's3:PutObject'
                                Resource:
                                    - !Join 
                                        - ''
                                        - 
                                            - 'arn:aws:s3:::'
                                            - !Ref KeyBucket
                                            - /enc_key
                                    - !Join 
                                        - ''
                                        - 
                                            - 'arn:aws:s3:::'
                                            - !Ref KeyBucket
                                            - /pub_key
                            - 
                                Effect: Allow
                                Action:
                                    - 'kms:Encrypt'
                                Resource:
                                    - '*'
                            - 
                                Effect: Allow
                                Action:
                                    - 'logs:CreateLogGroup'
                                    - 'logs:CreateLogStream'
                                    - 'logs:PutLogEvents'
                                Resource:
                                    - 'arn:aws:logs:*:*:*'

    CreateSSHKeyLambda:
        Type: 'AWS::Lambda::Function'
        Properties:
            Handler: lambda_function.lambda_handler
            MemorySize: '128'
            Role: !GetAtt 
                - CreateSSHKeyRole
                - Arn
            Runtime: python2.7
            Timeout: '300'
            Code:
                S3Bucket: !FindInMap 
                    - LambdaBuckets
                    - !Ref 'AWS::Region'
                    - Name
                S3Key: v1.0/CreateSSHKey.zip

    CreateSSHKey:
        Type: 'AWS::CloudFormation::CustomResource'
        Version: '1.0'
        Properties:
            ServiceToken: !GetAtt 
                - CreateSSHKeyLambda
                - Arn
            KeyBucket: !Ref KeyBucket
            Region: !Ref 'AWS::Region'
            KMSKey: !Ref KMSKey

    GitPullCloudWatchEvent:
        Type: 'AWS::Events::Rule'
        Properties:
            Description: 'Fire custom source action job worker'
            ScheduleExpression: 'rate(5 minutes)'
            State: 'ENABLED'
            Targets:
                - 
                    Arn: !GetAtt
                        - GitPullLambda
                        - Arn
                    Id: !Ref GitPullLambda
    
    PermissionForGitPullEvent:
        Type: 'AWS::Lambda::Permission'
        Properties:
            FunctionName: !Ref GitPullLambda
            Action: 'lambda:InvokeFunction'
            Principal: 'events.amazonaws.com'
            SourceArn: !GetAtt
                - GitPullCloudWatchEvent
                - Arn

    GitPullRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - 
                        Effect: Allow
                        Principal:
                            Service: lambda.amazonaws.com
                        Action: 'sts:AssumeRole'
            Path: /
            Policies:
                - 
                    PolicyName: git2cp-gitpull
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - 'kms:Decrypt'
                                Resource:
                                    - '*'
                            - 
                                Effect: Allow
                                Action:
                                    - 's3:PutObject'
                                Resource:
                                    - !Join 
                                        - ''
                                        - 
                                            - 'arn:aws:s3:::'
                                            - !Ref OutputBucket
                                    - !Join 
                                        - ''
                                        - 
                                            - 'arn:aws:s3:::'
                                            - !Ref OutputBucket
                                            - /*
                            - 
                                Effect: Allow
                                Action:
                                    - 's3:GetObject'
                                Resource:
                                    - !Join 
                                        - ''
                                        - 
                                            - 'arn:aws:s3:::'
                                            - !Ref KeyBucket
                                            - /enc_key
                                    - !Join 
                                        - ''
                                        - 
                                            - 'arn:aws:s3:::'
                                            - !Ref KeyBucket
                                            - /pub_key
                            - 
                                Effect: Allow
                                Action:
                                    - 'logs:CreateLogGroup'
                                    - 'logs:CreateLogStream'
                                    - 'logs:PutLogEvents'
                                Resource:
                                    - '*'
                            - 
                                Effect: Allow
                                Action:
                                    - 'codepipeline:PollForJobs'
                                    - 'codepipeline:AcknowledgeJob'
                                    - 'codepipeline:PutJobSuccessResult'
                                    - 'codepipeline:PutJobFailureResult'
                                Resource:
                                    - '*'
                            - 
                                Effect: Allow
                                Action:
                                    - 'ec2:CreateNetworkInterface'
                                    - 'ec2:DescribeNetworkInterfaces'
                                    - 'ec2:DeleteNetworkInterface'
                                Resource:
                                    - '*'
    
    GitPullLambda:
        Type: 'AWS::Lambda::Function'
        Properties:
            Handler: lambda_function.lambda_handler
            MemorySize: '128'
            Role: !GetAtt 
                - GitPullRole
                - Arn
            Runtime: python2.7
            Timeout: '300'
            Code:
                S3Bucket: !FindInMap 
                    - LambdaBuckets
                    - !Ref 'AWS::Region'
                    - Name
                S3Key: v1.0/GitPullS3.zip
            Environment:
                Variables:
                    CUSTOM_ACTION_VERSION: !FindInMap 
                        - Constants
                        - CustomSourceAction
                        - SourceActionVersion
                    CUSTOM_ACTION_PROVIDER: !FindInMap 
                        - Constants
                        - CustomSourceAction
                        - SourceActionProvider
            VpcConfig:
                SubnetIds: [!Ref GitPullLambdaSubnet]
                SecurityGroupIds:
                    - !Ref GitPullSecurityGroup
    
    GitPullSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: 'GitPullSecurityGroup'
            GroupDescription: 'Security group for the lambda function performing git pulls.'
            SecurityGroupEgress:
                - 
                    CidrIp: '0.0.0.0/0'
                    IpProtocol: 'tcp'
                    FromPort: '0'
                    ToPort: '65535'
            VpcId: !Ref GitPullLambdaVpc

    PipelineWebhook:
        Type: "AWS::CodePipeline::Webhook"
        Properties:
            Name: !Ref ApplicationName
            TargetPipeline: !Ref CodePipeline
            TargetPipelineVersion: 1
            TargetAction: Source
            Filters:
                - 
                    JsonPath: '$.ref'
                    MatchEquals: 'refs/heads/{Branch}'
            Authentication: GITHUB_HMAC
            AuthenticationConfiguration:
                SecretToken: !Ref ApiSecret
            RegisterWithThirdParty: false

Outputs:

    CodePipelineURL:
        Description: The URL for the created pipeline
        Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationName}      

    PublicSSHKey:
        Value: !Ref CreateSSHKey

    GitPullWebHookApi:
        Value: !GetAtt PipelineWebhook.Url 


